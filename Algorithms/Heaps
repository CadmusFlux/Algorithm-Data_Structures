Code: 
    class Heap:
      def __init__(self):
        self.values = [1000, 75, 64, 10, 15, 36, 42]

      def display(self):
        return self.values  

      def insert(self,value):
        self.values.append(value)
        def bubbleUp(element):
          index = len(self.values) - 1
          while index > 0:
            parent_index = (index-1) // 2
            if self.values[parent_index] > self.values[index]:
              break
            self.values[parent_index],self.values[index] = self.values[index],self.values[parent_index]
            index = parent_index
        bubbleUp(value) 
        return self.values
        
       def get_max(self):
      if len(self.values) < 1 :
        print("Empty Heap")
        return 0
      max = self.values[0]
      end = self.values.pop()
      if len(self.values) > 0 :
        self.values[0] = end
        self.trickledown(end)
      return max

    def trickledown(self,elem):
      index = 0
      length  = len(self.values)

      while True:
        leftchildi = 2*(index) + 1
        rightchildi =  2*(index) + 2
        swap = None
        if leftchildi < length : 
          leftchild = self.values[leftchildi]
          if leftchild > elem:
            swap = leftchildi
        if rightchildi < length : 
          rightchild = self.values[rightchildi]
          if (swap == None and rightchild > elem) or (swap != None and rightchild > leftchild):
            swap = rightchildi

        if swap == None : 
          break
        self.values[index] , self.values[swap] = self.values[swap] , self.values[index]
        index = swap
        
      x = Heap()
      x.insert(34)
      x.get_max()
      x.display()
